{
  "version": 3,
  "sources": ["../../../../../node_modules/@web3-onboard/walletconnect/dist/index.js"],
  "sourcesContent": ["const isHexString = (value) => {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    return true;\n};\nfunction walletConnect(options) {\n    const { bridge = 'https://bridge.walletconnect.org', qrcodeModalOptions, connectFirstChainId } = options || {};\n    return () => {\n        return {\n            label: 'WalletConnect',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ chains, EventEmitter }) => {\n                const { StaticJsonRpcProvider } = await import('@ethersproject/providers');\n                const { ProviderRpcError, ProviderRpcErrorCode } = await import('@web3-onboard/common');\n                const { default: WalletConnect } = await import('@walletconnect/client');\n                // This is a cjs module and therefor depending on build tooling\n                // sometimes it will be nested in the { default } object and\n                // other times it will be the actual import\n                // @ts-ignore - It thinks it is missing properties since it expect it to be nested under default\n                let QRCodeModal = await import('@walletconnect/qrcode-modal');\n                // @ts-ignore - TS thinks that there is no default property on the `QRCodeModal` but sometimes there is\n                QRCodeModal = QRCodeModal.default || QRCodeModal;\n                const { Subject, fromEvent } = await import('rxjs');\n                const { takeUntil, take } = await import('rxjs/operators');\n                const connector = new WalletConnect({\n                    bridge\n                });\n                const emitter = new EventEmitter();\n                class EthProvider {\n                    constructor({ connector, chains }) {\n                        this.emit = emitter.emit.bind(emitter);\n                        this.on = emitter.on.bind(emitter);\n                        this.removeListener = emitter.removeListener.bind(emitter);\n                        this.connector = connector;\n                        this.chains = chains;\n                        this.disconnected$ = new Subject();\n                        this.providers = {};\n                        // listen for session updates\n                        fromEvent(this.connector, 'session_update', (error, payload) => {\n                            if (error) {\n                                throw error;\n                            }\n                            return payload;\n                        })\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: ({ params }) => {\n                                const [{ accounts, chainId }] = params;\n                                this.emit('accountsChanged', accounts);\n                                const hexChainId = isHexString(chainId)\n                                    ? chainId\n                                    : `0x${chainId.toString(16)}`;\n                                this.emit('chainChanged', hexChainId);\n                            },\n                            error: console.warn\n                        });\n                        // listen for disconnect event\n                        fromEvent(this.connector, 'disconnect', (error, payload) => {\n                            if (error) {\n                                throw error;\n                            }\n                            return payload;\n                        })\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: () => {\n                                this.emit('accountsChanged', []);\n                                this.disconnected$.next(true);\n                                typeof localStorage !== 'undefined' &&\n                                    localStorage.removeItem('walletconnect');\n                            },\n                            error: console.warn\n                        });\n                        this.disconnect = () => this.connector.killSession();\n                        this.request = async ({ method, params }) => {\n                            if (method === 'eth_chainId') {\n                                return isHexString(this.connector.chainId)\n                                    ? this.connector.chainId\n                                    : `0x${this.connector.chainId.toString(16)}`;\n                            }\n                            if (method === 'eth_requestAccounts') {\n                                return new Promise((resolve, reject) => {\n                                    // Check if connection is already established\n                                    if (!this.connector.connected) {\n                                        // create new session\n                                        this.connector\n                                            .createSession(connectFirstChainId\n                                            ? { chainId: parseInt(chains[0].id, 16) }\n                                            : undefined)\n                                            .then(() => {\n                                            QRCodeModal.open(this.connector.uri, () => reject(new ProviderRpcError({\n                                                code: 4001,\n                                                message: 'User rejected the request.'\n                                            })), qrcodeModalOptions);\n                                        });\n                                    }\n                                    else {\n                                        const { accounts, chainId } = this.connector.session;\n                                        const hexChainId = isHexString(chainId)\n                                            ? chainId\n                                            : `0x${chainId.toString(16)}`;\n                                        this.emit('chainChanged', hexChainId);\n                                        return resolve(accounts);\n                                    }\n                                    // Subscribe to connection events\n                                    fromEvent(this.connector, 'connect', (error, payload) => {\n                                        if (error) {\n                                            throw error;\n                                        }\n                                        return payload;\n                                    })\n                                        .pipe(take(1))\n                                        .subscribe({\n                                        next: ({ params }) => {\n                                            const [{ accounts, chainId }] = params;\n                                            this.emit('accountsChanged', accounts);\n                                            const hexChainId = isHexString(chainId)\n                                                ? chainId\n                                                : `0x${chainId.toString(16)}`;\n                                            this.emit('chainChanged', hexChainId);\n                                            QRCodeModal.close();\n                                            resolve(accounts);\n                                        },\n                                        error: reject\n                                    });\n                                });\n                            }\n                            if (method === 'eth_selectAccounts') {\n                                throw new ProviderRpcError({\n                                    code: ProviderRpcErrorCode.UNSUPPORTED_METHOD,\n                                    message: `The Provider does not support the requested method: ${method}`\n                                });\n                            }\n                            if (method == 'wallet_switchEthereumChain') {\n                                if (!params) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                const chainIdObj = params[0];\n                                if (!chainIdObj.hasOwnProperty('chainId') ||\n                                    typeof chainIdObj['chainId'] === 'undefined') {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                return this.connector.sendCustomRequest({\n                                    method: 'wallet_switchEthereumChain',\n                                    params: [\n                                        {\n                                            chainId: chainIdObj.chainId\n                                        }\n                                    ]\n                                });\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_sendTransaction') {\n                                // @ts-ignore\n                                return this.connector.sendTransaction(params[0]);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_signTransaction') {\n                                // @ts-ignore\n                                return this.connector.signTransaction(params[0]);\n                            }\n                            // @ts-ignore\n                            if (method === 'personal_sign') {\n                                // @ts-ignore\n                                return this.connector.signPersonalMessage(params);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_sign') {\n                                // @ts-ignore\n                                return this.connector.signMessage(params);\n                            }\n                            // @ts-ignore\n                            if (method.includes('eth_signTypedData')) {\n                                // @ts-ignore\n                                return this.connector.signTypedData(params);\n                            }\n                            if (method === 'eth_accounts') {\n                                return this.connector.sendCustomRequest({\n                                    id: 1337,\n                                    jsonrpc: '2.0',\n                                    method,\n                                    params\n                                });\n                            }\n                            const chainId = await this.request({ method: 'eth_chainId' });\n                            if (!this.providers[chainId]) {\n                                const currentChain = chains.find(({ id }) => id === chainId);\n                                if (!currentChain) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.CHAIN_NOT_ADDED,\n                                        message: `The Provider does not have a rpcUrl to make a request for the requested method: ${method}`\n                                    });\n                                }\n                                this.providers[chainId] = new StaticJsonRpcProvider(currentChain.rpcUrl);\n                            }\n                            return this.providers[chainId].send(method, \n                            // @ts-ignore\n                            params);\n                        };\n                    }\n                }\n                return {\n                    provider: new EthProvider({ chains, connector })\n                };\n            }\n        };\n    };\n}\nexport default walletConnect;\n"],
  "mappings": "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",
  "names": ["connector", "chains", "chainId", "params"]
}
